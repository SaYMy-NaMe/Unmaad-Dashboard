{"ast":null,"code":"import{buildApiUrl}from'./baseUrl';// Helper function to strip echoed input from bot response\nexport const stripEchoedInput=(userMessage,botResponse)=>{if(!botResponse||typeof botResponse!=='string')return botResponse;const userMsg=userMessage.trim().toLowerCase();const botResp=botResponse.trim();if(botResp.toLowerCase().startsWith(userMsg)){return botResp.slice(userMsg.length).trim();}return botResponse;};// Helper function to process bot response\nexport const processBotResponse=(result,message)=>{let botResponse='';if(result.data.output){if(result.data.output.textbox_value){botResponse=stripEchoedInput(message,result.data.output.textbox_value);}else if(result.data.output.chatbot_value){// Handle chatbot_value which might be an array\nlet chatbotValue=result.data.output.chatbot_value;if(Array.isArray(chatbotValue)&&chatbotValue.length>0){// If it's an array of arrays, get the last message\nif(Array.isArray(chatbotValue[0])){chatbotValue=chatbotValue[0][chatbotValue[0].length-1]||'';}else{chatbotValue=chatbotValue[chatbotValue.length-1]||'';}}botResponse=stripEchoedInput(message,chatbotValue);}}else if(result.data.response){botResponse=JSON.stringify(result.data.response,null,2);}else{botResponse='No response received';}return botResponse;};// Helper function to get endpoint configuration\nexport const getEndpointConfig=(activeTab,message)=>{let endpoint='';switch(activeTab){case'satirical-bot':endpoint='/api/satirical-bot';break;case'satirical-bot-1':endpoint='/api/satirical-bot-1';break;case'lambda':endpoint='/api/lambda';break;default:endpoint='/api/satirical-bot';}const config={method:activeTab==='lambda'?'get':'post',url:buildApiUrl(endpoint),...(activeTab!=='lambda'&&{data:{message,conversationId:`conv_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,timestamp:new Date().toISOString()}})};return config;};","map":{"version":3,"names":["buildApiUrl","stripEchoedInput","userMessage","botResponse","userMsg","trim","toLowerCase","botResp","startsWith","slice","length","processBotResponse","result","message","data","output","textbox_value","chatbot_value","chatbotValue","Array","isArray","response","JSON","stringify","getEndpointConfig","activeTab","endpoint","config","method","url","conversationId","Date","now","Math","random","toString","substr","timestamp","toISOString"],"sources":["/Users/ashraf/Desktop/Unmaad/client/src/utils/helpers.js"],"sourcesContent":["import { buildApiUrl } from './baseUrl';\n\n// Helper function to strip echoed input from bot response\nexport const stripEchoedInput = (userMessage, botResponse) => {\n  if (!botResponse || typeof botResponse !== 'string') return botResponse;\n  \n  const userMsg = userMessage.trim().toLowerCase();\n  const botResp = botResponse.trim();\n  \n  if (botResp.toLowerCase().startsWith(userMsg)) {\n    return botResp.slice(userMsg.length).trim();\n  }\n  return botResponse;\n};\n\n// Helper function to process bot response\nexport const processBotResponse = (result, message) => {\n  let botResponse = '';\n  \n  if (result.data.output) {\n    if (result.data.output.textbox_value) {\n      botResponse = stripEchoedInput(message, result.data.output.textbox_value);\n    } else if (result.data.output.chatbot_value) {\n      // Handle chatbot_value which might be an array\n      let chatbotValue = result.data.output.chatbot_value;\n      if (Array.isArray(chatbotValue) && chatbotValue.length > 0) {\n        // If it's an array of arrays, get the last message\n        if (Array.isArray(chatbotValue[0])) {\n          chatbotValue = chatbotValue[0][chatbotValue[0].length - 1] || '';\n        } else {\n          chatbotValue = chatbotValue[chatbotValue.length - 1] || '';\n        }\n      }\n      botResponse = stripEchoedInput(message, chatbotValue);\n    }\n  } else if (result.data.response) {\n    botResponse = JSON.stringify(result.data.response, null, 2);\n  } else {\n    botResponse = 'No response received';\n  }\n  \n  return botResponse;\n};\n\n// Helper function to get endpoint configuration\nexport const getEndpointConfig = (activeTab, message) => {\n  let endpoint = '';\n  switch (activeTab) {\n    case 'satirical-bot':\n      endpoint = '/api/satirical-bot';\n      break;\n    case 'satirical-bot-1':\n      endpoint = '/api/satirical-bot-1';\n      break;\n    case 'lambda':\n      endpoint = '/api/lambda';\n      break;\n    default:\n      endpoint = '/api/satirical-bot';\n  }\n\n  const config = {\n    method: activeTab === 'lambda' ? 'get' : 'post',\n    url: buildApiUrl(endpoint),\n    ...(activeTab !== 'lambda' && { \n      data: { \n        message,\n        conversationId: `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        timestamp: new Date().toISOString()\n      } \n    })\n  };\n\n  return config;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}