{"ast":null,"code":"import { buildApiUrl } from './baseUrl';\n\n// Helper function to strip echoed input from bot response\nexport const stripEchoedInput = (userMessage, botResponse) => {\n  if (!botResponse || typeof botResponse !== 'string') return botResponse;\n  const userMsg = userMessage.trim().toLowerCase();\n  const botResp = botResponse.trim();\n  if (botResp.toLowerCase().startsWith(userMsg)) {\n    return botResp.slice(userMsg.length).trim();\n  }\n  return botResponse;\n};\n\n// Helper function to process bot response\nexport const processBotResponse = (result, message) => {\n  let botResponse = '';\n  if (result.data.output) {\n    if (result.data.output.textbox_value) {\n      botResponse = stripEchoedInput(message, result.data.output.textbox_value);\n    } else if (result.data.output.chatbot_value) {\n      // Handle chatbot_value which might be an array\n      let chatbotValue = result.data.output.chatbot_value;\n      if (Array.isArray(chatbotValue) && chatbotValue.length > 0) {\n        // If it's an array of arrays, get the last message\n        if (Array.isArray(chatbotValue[0])) {\n          chatbotValue = chatbotValue[0][chatbotValue[0].length - 1] || '';\n        } else {\n          chatbotValue = chatbotValue[chatbotValue.length - 1] || '';\n        }\n      }\n      botResponse = stripEchoedInput(message, chatbotValue);\n    }\n  } else if (result.data.response) {\n    botResponse = JSON.stringify(result.data.response, null, 2);\n  } else {\n    botResponse = 'No response received';\n  }\n  return botResponse;\n};\n\n// Helper function to get endpoint configuration\nexport const getEndpointConfig = (activeTab, message) => {\n  let endpoint = '';\n  switch (activeTab) {\n    case 'satirical-bot':\n      endpoint = '/api/satirical-bot';\n      break;\n    case 'satirical-bot-1':\n      endpoint = '/api/satirical-bot-1';\n      break;\n    case 'lambda':\n      endpoint = '/api/lambda';\n      break;\n    default:\n      endpoint = '/api/satirical-bot';\n  }\n  const config = {\n    method: activeTab === 'lambda' ? 'get' : 'post',\n    url: buildApiUrl(endpoint),\n    ...(activeTab !== 'lambda' && {\n      data: {\n        message,\n        conversationId: `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        timestamp: new Date().toISOString()\n      }\n    })\n  };\n  return config;\n};","map":{"version":3,"names":["buildApiUrl","stripEchoedInput","userMessage","botResponse","userMsg","trim","toLowerCase","botResp","startsWith","slice","length","processBotResponse","result","message","data","output","textbox_value","chatbot_value","chatbotValue","Array","isArray","response","JSON","stringify","getEndpointConfig","activeTab","endpoint","config","method","url","conversationId","Date","now","Math","random","toString","substr","timestamp","toISOString"],"sources":["/Users/ashraf/Desktop/Unmaad/client/src/utils/helpers.js"],"sourcesContent":["import { buildApiUrl } from './baseUrl';\n\n// Helper function to strip echoed input from bot response\nexport const stripEchoedInput = (userMessage, botResponse) => {\n  if (!botResponse || typeof botResponse !== 'string') return botResponse;\n  \n  const userMsg = userMessage.trim().toLowerCase();\n  const botResp = botResponse.trim();\n  \n  if (botResp.toLowerCase().startsWith(userMsg)) {\n    return botResp.slice(userMsg.length).trim();\n  }\n  return botResponse;\n};\n\n// Helper function to process bot response\nexport const processBotResponse = (result, message) => {\n  let botResponse = '';\n  \n  if (result.data.output) {\n    if (result.data.output.textbox_value) {\n      botResponse = stripEchoedInput(message, result.data.output.textbox_value);\n    } else if (result.data.output.chatbot_value) {\n      // Handle chatbot_value which might be an array\n      let chatbotValue = result.data.output.chatbot_value;\n      if (Array.isArray(chatbotValue) && chatbotValue.length > 0) {\n        // If it's an array of arrays, get the last message\n        if (Array.isArray(chatbotValue[0])) {\n          chatbotValue = chatbotValue[0][chatbotValue[0].length - 1] || '';\n        } else {\n          chatbotValue = chatbotValue[chatbotValue.length - 1] || '';\n        }\n      }\n      botResponse = stripEchoedInput(message, chatbotValue);\n    }\n  } else if (result.data.response) {\n    botResponse = JSON.stringify(result.data.response, null, 2);\n  } else {\n    botResponse = 'No response received';\n  }\n  \n  return botResponse;\n};\n\n// Helper function to get endpoint configuration\nexport const getEndpointConfig = (activeTab, message) => {\n  let endpoint = '';\n  switch (activeTab) {\n    case 'satirical-bot':\n      endpoint = '/api/satirical-bot';\n      break;\n    case 'satirical-bot-1':\n      endpoint = '/api/satirical-bot-1';\n      break;\n    case 'lambda':\n      endpoint = '/api/lambda';\n      break;\n    default:\n      endpoint = '/api/satirical-bot';\n  }\n\n  const config = {\n    method: activeTab === 'lambda' ? 'get' : 'post',\n    url: buildApiUrl(endpoint),\n    ...(activeTab !== 'lambda' && { \n      data: { \n        message,\n        conversationId: `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        timestamp: new Date().toISOString()\n      } \n    })\n  };\n\n  return config;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}